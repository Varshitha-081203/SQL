SELECT * FROM IMDB;
SELECT * FROM DIRECTORS;

-- 1.List all movies with their titles and ratings.
SELECT TITLE,RATING FROM IMDB;

-- 2.Retrieve all movies released after 2010.
SELECT * FROM IMDB WHERE RELEASE_YEAR>2010;

-- 3.Find the highest-rated movie.
SELECT MAX(RATING),TITLE FROM IMDB;-- ERROR BEACAUSE AGGREGATED AND NON-AGGREGATED COLUMNS WILL NOT BE ACCEPTED TOGETHER

SELECT TITLE, RATING
FROM IMDB
ORDER BY RATING DESC
LIMIT 1;

-- 4.Count the number of movies in each genre.
SELECT COUNT(MOVIE_ID),GENRE FROM IMDB GROUP BY GENRE;

-- 5.Show movies with a duration greater than 150 minutes.
SELECT * FROM IMDB WHERE DURATION>150;

-- 6.Get the average revenue of all movies.
SELECT AVG(REVENUE_MILLION) AS AVG_REVENUE FROM IMDB;

-- 7.Retrieve all movies directed by Christopher Nolan.
SELECT TITLE,DIRECTOR_NAME FROM DIRECTORS AS D JOIN IMDB AS I ON D.DIRECTOR_ID=I.DIRECTOR_ID WHERE DIRECTOR_NAME='Christopher Nolan';

-- 8.List movies in descending order of revenue.
SELECT * FROM IMDB ORDER BY REVENUE_MILLION DESC;

-- 9.Find all unique genres available.
SELECT GENRE FROM IMDB GROUP BY GENRE;

-- 10.Display movies whose title starts with 'I'.
SELECT * FROM IMDB WHERE TITLE LIKE 'I%';

-- 11.Join the Movies and Directors table to list each movie with its director's name.
SELECT TITLE,DIRECTOR_NAME FROM DIRECTORS AS D  JOIN IMDB AS I ON D.DIRECTOR_ID=I.DIRECTOR_ID;

-- 12.Show total revenue earned by each director.
SELECT SUM(REVENUE_MILLION) AS TOTAL_REVENUE, DIRECTOR_NAME FROM DIRECTORS AS D JOIN IMDB AS I ON D.DIRECTOR_ID=I.DIRECTOR_ID GROUP BY DIRECTOR_NAME;

-- 13.Count how many movies each director has made.
SELECT COUNT(MOVIE_ID) AS COUNT, DIRECTOR_NAME FROM DIRECTORS AS D  JOIN IMDB AS I ON D.DIRECTOR_ID=I.DIRECTOR_ID GROUP BY DIRECTOR_NAME;

-- 14.List directors who have directed more than one movie.
SELECT COUNT(MOVIE_ID) AS COUNT, DIRECTOR_NAME FROM DIRECTORS AS D JOIN IMDB AS I ON D.DIRECTOR_ID=I.DIRECTOR_ID GROUP BY DIRECTOR_NAME HAVING COUNT(Movie_ID)>1 ;

-- 15.Use CASE to label movies as "Hit", "Average", or "Flop" based on revenue.
SELECT MOVIE_ID,TITLE,RATING ,
CASE 
WHEN REVENUE_MILLION>1500 THEN 'HIT'
WHEN REVENUE_MILLION>=800 THEN 'AVERAGE'
ELSE 'FLOP' 
END AS movie_status FROM IMDB;

-- 16.Use a window function to rank movies by revenue within each genre.
SELECT MOVIE_ID,TITLE,GENRE,REVENUE_MILLION,RANK() OVER(PARTITION BY GENRE ORDER BY REVENUE_MILLION DESC) AS RANKED FROM IMDB;

-- 17.Show movies that earned more than the average revenue of all movies.
SELECT TITLE,AVG(REVENUE_MILLION)AS AVG_REVENUE FROM IMDB WHERE REVENUE_MILLION > (SELECT AVG(REVENUE_MILLION)  FROM IMDB) GROUP BY TITLE;
SELECT AVG(REVENUE_MILLION)  FROM IMDB;
SELECT TITLE,AVG(REVENUE_MILLION)AS AVG_REVENUE FROM IMDB WHERE REVENUE_MILLION > '1287.1125' GROUP BY TITLE;

-- 18.For each director, show their highest-grossing movie.
SELECT MAX(REVENUE_MILLION),DIRECTOR_NAME FROM DIRECTORS AS D JOIN IMDB AS I ON D.DIRECTOR_ID=I.DIRECTOR_ID  GROUP BY DIRECTOR_NAME  ;

-- 19.Find the top 2 longest movies using ROW_NUMBER().
SELECT *
FROM(
    SELECT TITLE,
           GENRE,
           DURATION,
           ROW_NUMBER() OVER (ORDER BY DURATION DESC) AS RANKING
    FROM IMDB
) AS ranked
WHERE RANKING <= 2;

-- 20.List all directors along with the average rating of their movies.
SELECT AVG(RATING) AS AVG_RATING,DIRECTOR_NAME FROM DIRECTORS AS D JOIN IMDB AS I ON D.DIRECTOR_ID=I.DIRECTOR_ID  GROUP BY DIRECTOR_NAME ORDER BY AVG_RATING DESC;
